Use a unified size type

--- src/lib/libc/sys/arm/include/_types.h
+++ src/lib/libc/sys/arm/include/_types.h
@@ -88,8 +88,8 @@ typedef	__int64_t	__int_least64_t;
 typedef	__int32_t	__ptrdiff_t;		/* ptr1 - ptr2 */
 typedef	__int32_t	__register_t;
 typedef	__int32_t	__segsz_t;		/* segment size (in pages) */
-typedef	__uint32_t	__size_t;		/* sizeof() */
-typedef	__int32_t	__ssize_t;		/* byte count or error */
+typedef	long unsigned int	__size_t;		/* sizeof() */
+typedef	long int	__ssize_t;		/* byte count or error */
 typedef	__int64_t	__time_t;		/* time()... */
 typedef	__uint32_t	__uintfptr_t;
 typedef	__uint64_t	__uintmax_t;

--- src/lib/libc/sys/x86/include/_types.h
+++ src/lib/libc/sys/x86/include/_types.h
@@ -103,8 +103,8 @@ typedef	__int64_t	__int_least64_t;
 typedef	__int64_t	__ptrdiff_t;		/* ptr1 - ptr2 */
 typedef	__int64_t	__register_t;
 typedef	__int64_t	__segsz_t;		/* segment size (in pages) */
-typedef	__uint64_t	__size_t;		/* sizeof() */
-typedef	__int64_t	__ssize_t;		/* byte count or error */
+typedef	long unsigned int	__size_t;		/* sizeof() */
+typedef	long int	__ssize_t;		/* byte count or error */
 typedef	__int64_t	__time_t;		/* time()... */
 typedef	__uint64_t	__uintfptr_t;
 typedef	__uint64_t	__uintptr_t;
